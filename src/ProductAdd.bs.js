// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReForm = require("bs-reform/re/ReForm.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var ReForm_Validation = require("bs-reform/re/ReForm_Validation.js");
var Text$BsReactNative = require("bs-react-native/src/components/text.js");
var View$BsReactNative = require("bs-react-native/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/src/style.js");
var TextInput$BsReactNative = require("bs-react-native/src/components/textInput.js");
var TouchableOpacity$BsReactNative = require("bs-react-native/src/components/touchableOpacity.js");

var lens_000 = /* tuple */[
  /* name */-922783157,
  (function (s) {
      return s[/* name */0];
    }),
  (function (s, v) {
      return /* record */[
              /* name */v,
              /* price */s[/* price */1],
              /* barcode */s[/* barcode */2]
            ];
    })
];

var lens_001 = /* :: */[
  /* tuple */[
    /* price */-930394487,
    (function (s) {
        return s[/* price */1];
      }),
    (function (s, v) {
        return /* record */[
                /* name */s[/* name */0],
                /* price */v,
                /* barcode */s[/* barcode */2]
              ];
      })
  ],
  /* :: */[
    /* tuple */[
      /* barcode */424167552,
      (function (s) {
          return s[/* barcode */2];
        }),
      (function (s, v) {
          return /* record */[
                  /* name */s[/* name */0],
                  /* price */s[/* price */1],
                  /* barcode */v
                ];
        })
    ],
    /* [] */0
  ]
];

var lens = /* :: */[
  lens_000,
  lens_001
];

var ProductAddFormParams = /* module */[/* lens */lens];

var ProductAddForm = ReForm.Create(ProductAddFormParams);

var Graphql_error = Caml_exceptions.create("ProductAdd.Mutation.Graphql_error");

var query = "mutation ProductAddMutation($barcode: String!, $name: String!, $price: Int!)  {\ncreateProduct(barcode: $barcode, name: $name, price: $price)  {\nid  \n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["createProduct"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0]["id"];
        var match$3 = Js_json.decodeString(value$2);
        var tmp$2;
        if (match$3) {
          tmp$2 = match$3[0];
        } else {
          throw Graphql_error;
        }
        tmp$1 = {
          id: tmp$2
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            createProduct: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function json_of_Int(value) {
  return value;
}

function make(barcode, name, price, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "barcode",
                  barcode
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* :: */[
                    /* tuple */[
                      "price",
                      price
                    ],
                    /* [] */0
                  ]
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var barcode = variables.barcode;
  var name = variables.name;
  var price = variables.price;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "barcode",
                  barcode
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* :: */[
                    /* tuple */[
                      "price",
                      price
                    ],
                    /* [] */0
                  ]
                ]
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var Mutation = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* json_of_Int */json_of_Int,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var ProductAddMutation = ReasonApollo.CreateMutation([
      query,
      parse
    ]);

var wrapper = Style$BsReactNative.style(/* :: */[
      Style$BsReactNative.flex(1),
      /* [] */0
    ]);

var title = Style$BsReactNative.style(/* :: */[
      Style$BsReactNative.marginTop(/* Pt */Block.__(0, [100])),
      /* :: */[
        Style$BsReactNative.fontSize(/* Float */Block.__(0, [40])),
        /* :: */[
          Style$BsReactNative.textAlign(/* Center */3),
          /* [] */0
        ]
      ]
    ]);

var input = Style$BsReactNative.style(/* :: */[
      Style$BsReactNative.height(/* Pt */Block.__(0, [50])),
      /* :: */[
        Style$BsReactNative.marginTop(/* Pt */Block.__(0, [10])),
        /* :: */[
          Style$BsReactNative.paddingLeft(/* Pt */Block.__(0, [5])),
          /* :: */[
            Style$BsReactNative.backgroundColor("#f5f5f5"),
            /* [] */0
          ]
        ]
      ]
    ]);

var addButton = Style$BsReactNative.style(/* :: */[
      Style$BsReactNative.padding(/* Pt */Block.__(0, [15])),
      /* :: */[
        Style$BsReactNative.backgroundColor("#000"),
        /* :: */[
          Style$BsReactNative.alignItems(/* Center */2),
          /* :: */[
            Style$BsReactNative.justifyContent(/* Center */2),
            /* :: */[
              Style$BsReactNative.paddingBottom(/* Pt */Block.__(0, [30])),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var buttonText = Style$BsReactNative.style(/* :: */[
      Style$BsReactNative.color("#fff"),
      /* [] */0
    ]);

var Styles = /* module */[
  /* wrapper */wrapper,
  /* title */title,
  /* input */input,
  /* addButton */addButton,
  /* buttonText */buttonText
];

var component = ReasonReact.statelessComponent("Label");

function make$1(label, placeholder, keyboardType, field, handleChange, getErrorForField, value, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var match = Curry._1(getErrorForField, field);
      return ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[
                      ReasonReact.element(/* None */0, /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[label], /* array */[])),
                      ReasonReact.element(/* None */0, /* None */0, TextInput$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[input], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, keyboardType, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[Curry._1(handleChange, field)], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, placeholder, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[value], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[])),
                      match ? ReasonReact.element(/* None */0, /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[match[0]], /* array */[])) : null
                    ]));
    });
  return newrecord;
}

var Input = /* module */[
  /* component */component,
  /* make */make$1
];

function onSubmit(mutate, push, param) {
  var values = param[/* values */0];
  var price = 100 * Caml_format.caml_float_of_string(values[/* price */1]) | 0;
  var mutation = make(values[/* barcode */2], values[/* name */0], price, /* () */0);
  Curry._1(mutate, {
            variables: mutation.variables,
            refetchQueries: /* array */["HomeQuery"]
          }).then((function (data) {
            console.log(data);
            return Promise.resolve(Curry._2(push, /* Home */0, /* () */0));
          })).catch((function (error) {
          return Promise.resolve((console.log(error), /* () */0));
        }));
  return /* () */0;
}

var component$1 = ReasonReact.statelessComponent("ProductAdd");

function make$2(push, _) {
  var newrecord = component$1.slice();
  newrecord[/* render */9] = (function () {
      return ReasonReact.element(/* None */0, /* None */0, Curry._4(ProductAddMutation[/* make */3], /* None */0, /* None */0, /* None */0, (function (mutate, _) {
                        return ReasonReact.element(/* None */0, /* None */0, Curry._7(ProductAddForm[/* make */2], (function (param) {
                                          return onSubmit(mutate, push, param);
                                        }), /* None */0, /* None */0, /* record */[
                                        /* name */"",
                                        /* price */"0",
                                        /* barcode */""
                                      ], /* :: */[
                                        /* tuple */[
                                          /* name */-922783157,
                                          /* Required */0
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            /* price */-930394487,
                                            /* Required */0
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              /* barcode */424167552,
                                              /* Required */0
                                            ],
                                            /* [] */0
                                          ]
                                        ]
                                      ], /* Some */[ReForm_Validation.I18n[/* ptBR */0]], (function (param) {
                                          var getErrorForField = param[/* getErrorForField */4];
                                          var handleChange = param[/* handleChange */1];
                                          var form = param[/* form */0];
                                          return ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[wrapper], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[
                                                          ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[wrapper], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[
                                                                    ReasonReact.element(/* None */0, /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[title], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Novo produto"], /* array */[])),
                                                                    ReasonReact.element(/* None */0, /* None */0, make$1("Nome", /* Some */["Aguardente Pangalactica"], /* None */0, /* name */-922783157, handleChange, getErrorForField, form[/* values */0][/* name */0], /* array */[])),
                                                                    ReasonReact.element(/* None */0, /* None */0, make$1("Preço", /* Some */["0.00"], /* Some */[/* numeric */734061261], /* price */-930394487, handleChange, getErrorForField, form[/* values */0][/* price */1], /* array */[])),
                                                                    ReasonReact.element(/* None */0, /* None */0, make$1("Barcode", /* Some */["0"], /* Some */[/* numeric */734061261], /* barcode */424167552, handleChange, getErrorForField, form[/* values */0][/* barcode */2], /* array */[]))
                                                                  ])),
                                                          ReasonReact.element(/* None */0, /* None */0, TouchableOpacity$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[addButton], /* None */0, /* Some */[param[/* handleSubmit */3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[ReasonReact.element(/* None */0, /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[buttonText], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */["Adicionar produto"], /* array */[]))]))
                                                        ]));
                                        })));
                      })));
    });
  return newrecord;
}

exports.ProductAddFormParams = ProductAddFormParams;
exports.ProductAddForm = ProductAddForm;
exports.Mutation = Mutation;
exports.ProductAddMutation = ProductAddMutation;
exports.Styles = Styles;
exports.Input = Input;
exports.onSubmit = onSubmit;
exports.component = component$1;
exports.make = make$2;
/* ProductAddForm Not a pure module */
